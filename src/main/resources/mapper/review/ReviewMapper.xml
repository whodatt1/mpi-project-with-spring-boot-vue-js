<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mpi.mapper.ReviewMapper">
	<insert id="createReview" parameterType="ReviewDto">
		INSERT INTO tb_review
		(
			writer_id,
			ratings,
			content,
			del,
			reg_dt,
			reg_user_id,
			mod_dt,
			mod_user_id,
			movie_id
		)
		VALUES
		(
			#{writerId},
			#{ratings},
			#{content},
			0,
			now(),
			#{writerId},
			now(),
			#{writerId},
			#{movieId}
		)
	</insert>
	<select id="getReviewList" parameterType="string" resultType="ReviewDto">
		SELECT * FROM tb_review
			WHERE 1=1
			AND del = 0
			AND movie_id = #{movieId}	
	</select>
	<select id="getRatingsAverage" parameterType="string" resultType="Object">
		SELECT 
			AVG(ratings)			
			FROM tb_review
			WHERE 1=1
			AND del = 0
			AND movie_id = #{movieId};	
	</select>
	<update id="delReview" parameterType="ReviewDto">
		UPDATE tb_review
			SET
			del = #{del},
			mod_dt = now(),
			mod_user_id = #{modUserId}
			WHERE 1=1
			AND id = #{id}
	</update>
	<select id="getReviewData" parameterType="string" resultType="HashMap">
		SELECT
		  COUNT(CASE WHEN ratings = 2 THEN 1 END) AS cnt2,
		  COUNT(CASE WHEN ratings = 4 THEN 1 END) AS cnt4,
		  COUNT(CASE WHEN ratings = 6 THEN 1 END) AS cnt6,
		  COUNT(CASE WHEN ratings = 8 THEN 1 END) AS cnt8,
		  COUNT(CASE WHEN ratings = 10 THEN 1 END) AS cnt10,
		  COUNT(CASE WHEN ratings BETWEEN 2 AND 10 THEN 1 END) AS allCnt
		FROM
		  mpi.tb_review
		WHERE
		  writer_id = #{userId};
	</select>
</mapper>